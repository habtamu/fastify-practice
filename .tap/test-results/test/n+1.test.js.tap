TAP version 14
# Subtest: should return owner of the pet
    ok 1 - should be equal
    not ok 2 - should be equal
      ---
      compare: ===
      at:
        fileName: test/n+1.test.js
        lineNumber: 29
        columnNumber: 5
        typeName: Test
      stack: |
        Test.<anonymous> (test/n+1.test.js:29:5)
      source: |2
          const { data, errors } = await response.json()
      
          t.equal(errors, undefined)
        ----^
          t.strictSame(data, {
            pets: [
      diff: |
        --- expected
        +++ actual
        @@ -1,1 +1,14 @@
        -undefined
        +Array [
        +  Object {
        +    "message": "relation \"pets\" does not exist",
        +    "locations": Array [
        +      Object {
        +        "line": 2,
        +        "column": 7,
        +      },
        +    ],
        +    "path": Array [
        +      "pets",
        +    ],
        +  },
        +]
      ...
    
    not ok 3 - should be equivalent strictly
      ---
      diff: |
        --- expected
        +++ actual
        @@ -1,16 +1,3 @@
         Object {
        -  "pets": Array [
        -    Object {
        -      "name": "Max",
        -      "owner": Object {
        -        "name": "Jennifer",
        -      },
        -    },
        -    Object {
        -      "name": "Charlie",
        -      "owner": Object {
        -        "name": "Simon",
        -      },
        -    },
        -  ],
        +  "pets": null,
         }
      at:
        fileName: test/n+1.test.js
        lineNumber: 30
        columnNumber: 5
        typeName: Test
      stack: |
        Test.<anonymous> (test/n+1.test.js:30:5)
      source: |2
      
          t.equal(errors, undefined)
          t.strictSame(data, {
        ----^
            pets: [
              {
      ...
    
    1..3
not ok 1 - should return owner of the pet # time=474.367ms
  ---
  at:
    fileName: test/n+1.test.js
    lineNumber: 4
    columnNumber: 1
    isToplevel: true
  source: |
    import buildServer from '../index.js'
  
    test('should return owner of the pet', async t => {
    ^
      const server = buildServer()
  ...

[14:15:07.769] [32mINFO[39m (29122): [36mincoming request[39m
    reqId: "req-1"
    req: {
      "method": "POST",
      "url": "/graphql",
      "hostname": "localhost:80",
      "remoteAddress": "127.0.0.1"
    }
1..1
[14:15:07.846] [32mINFO[39m (29122): [36mrelation "pets" does not exist[39m
    reqId: "req-1"
    err: {
      "type": "GraphQLError",
      "message": "relation \"pets\" does not exist",
      "stack":
          error: relation "pets" does not exist
              at /Users/habtamu.desalegn/Developer/Github/fastify-practice/node_modules/.pnpm/pg-pool@3.6.1_pg@8.11.3/node_modules/pg-pool/index.js:45:11
              at processTicksAndRejections (node:internal/process/task_queues:95:5)
              at async loadPets (file:///Users/habtamu.desalegn/Developer/Github/fastify-practice/lib/db.js:4:20)
              at async Promise.all (index 0)
              at async Object.fastifyGraphQl [as graphql] (/Users/habtamu.desalegn/Developer/Github/fastify-practice/node_modules/.pnpm/mercurius@13.1.0_graphql@16.8.1/node_modules/mercurius/index.js:542:23)
      "path": [
        "pets"
      ],
      "locations": [
        {
          "line": 2,
          "column": 7
        }
      ],
      "extensions": {}
    }
[14:15:07.857] [32mINFO[39m (29122): [36mrequest completed[39m
    reqId: "req-1"
    res: {
      "statusCode": 200
    }
    responseTime: 87.2415289953351
